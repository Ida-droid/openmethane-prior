name: "Setup Python and Poetry"
description: "setup Python and Poetry with caches"

inputs:
  python-version:
    description: "Python version to use"
    required: true
  venv-id:
    description: "ID to identify cached environment (should be unique from other steps)"
    required: true
  poetry-dependency-install-flags:
    description: "Flags to pass to poetry when running `poetry install --no-interaction --no-root`"
    required: true
  run-poetry-install:
    description: "Should we run the poetry install steps"
    required: false
    default: true


runs:
  using: "composite"
  steps:
    - name: Set up Python 3.11.2# ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11.2 # ${{ inputs.python-version }}
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-2  # increment to reset cache
    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
    - name: Load cached venv
      if: ${{ inputs.run-poetry-install == 'true' }}
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: "venv-${{ inputs.venv-id }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}"
    # Install dependencies first so that our package doesn't appear in the cache by accident
    - name: Install dependencies
      if: ${{ inputs.run-poetry-install == 'true' }}
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry env use ${{ inputs.python-version }}
        poetry install --no-interaction --no-root ${{ inputs.poetry-dependency-install-flags }}
    # Now run same command but let the package install too
    - name: Install package
      if: ${{ inputs.run-poetry-install == 'true' }}
      shell: bash
      run: poetry install --no-interaction ${{ inputs.poetry-dependency-install-flags }}

#inputs:
#  python-version:
#    description: "Python version to use"
#    required: true
#  cache-dependency-path:
#    description: "Requirement files to install. Can be a glob pattern."
#    default: '**/requirements*.txt'
#  venv-dir:
#    default: '.venv'
#
#outputs:
#  cache-hit:
#    description: "A boolean value to indicate if a cache was restored"
#    value: ${{ steps.cache-venv.outputs.cache-hit }}
#
#runs:
#  using: 'composite'
#  steps:
#    - run: cp .env.example .env
#      shell: bash
#
#    - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c  # v5.0.0
#      id: setup-python
#      with:
#        python-version: ${{ inputs.python-version }}
#
#    - run: echo '::remove-matcher owner=python::'
#      shell: bash
#
#    - uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2  # v4.0.0
#      id: cache-venv
#      with:
#        path: ${{ inputs.venv-dir }}
#        key: setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-${{ steps.setup-python.outputs.python-path }}-${{ hashFiles(inputs.cache-dependency-path) }}-${{ inputs.install-cmd }}
#
#    - run: python3 -m venv ${{ inputs.venv-dir }}
#      if: steps.cache-venv.outputs.cache-hit != 'true'
#      shell: bash
#
#    - run: |
#        source ${{ inputs.venv-dir }}/bin/activate
#        python -m pip install -r requirements.txt
#        python -m pip install -r requirements-dev.txt
#        python -m pip install -e .
#        echo "VIRTUAL_ENV=${VIRTUAL_ENV}" >> $GITHUB_ENV
#        echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH
#
#      shell: bash


